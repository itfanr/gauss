<?xml version="0.0"?>
<launch>
    <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->

    <arg name="hardware_version" default="1" /> 
    <arg name="urdf_without_meshes" default="true" />
    <arg name="gauss_sim_mode" default="false" />
    <arg name="execute_on_gauss_raspberry_pi_image" default="true" /> 

    <!-- PARAMS -->
    <group ns="gauss">
        <param name="hardware_version" type="int" value="$(arg hardware_version)" /> 
        <param name="reboot_when_auto_change_version" type="bool" value="true" />
    </group>

    <group ns="gauss/robot_command_validation">
        <rosparam file="$(find gauss_bringup)/config/v1/robot_command_validation.yaml" if="$(eval hardware_version == 1)" />
        <rosparam file="$(find gauss_bringup)/config/v2/robot_command_validation.yaml" if="$(eval hardware_version == 2)" />
    </group>

    <group ns="gauss/motors">
        <rosparam file="$(find gauss_bringup)/config/v1/gauss_motors.yaml" if="$(eval hardware_version == 1)"/>
        <rosparam file="$(find gauss_bringup)/config/v2/gauss_motors.yaml" if="$(eval hardware_version == 2)"/>
        <rosparam file="$(find gauss_bringup)/config/v1/stepper_params.yaml" if="$(eval hardware_version == 1)"/>
        <rosparam file="$(find gauss_bringup)/config/v2/stepper_params.yaml" if="$(eval hardware_version == 2)"/>
    </group>

    <group ns="gauss/python_api">
        <param name="service_timeout" type="int" value="2" />
        <param name="action_connection_timeout" type="int" value="2" />
        <param name="action_execute_timeout" type="int" value="15" />
        <param name="action_preempt_timeout" type="int" value="3" />
    </group>

    <group ns="gauss/info">
        <param name="ros_version"               type="string" command="rosversion gauss_bringup" />
        <param name="gauss_one_robot_type"  type="string" value="gauss" />
        <param name="image_version"             type="string" if="$(arg execute_on_gauss_raspberry_pi_image)"
            textfile="/home/gauss/gauss_saved_values/gauss_image_version_do_not_edit.txt" />
    </group>

    <group ns="gauss/robot_state">
        <param name="rate_tf_listener" type="double" value="5.0" />
        <param name="rate_publish_state" type="double" value="5.0" />
    </group>

    <!-- load URDF -->
    <!-- on Raspberry Pi 3 (ARM architecture) we get a segfault when using visual and collision stuff -->
    <param name="urdf_without_meshes" value="$(arg urdf_without_meshes)" />
    <group if="$(eval hardware_version == 1)">
        <param name="robot_description" command="$(find xacro)/xacro --inorder $(find gauss_description)/urdf/without_mesh_gauss.urdf.xacro" if="$(arg urdf_without_meshes)"/>
        <param name="robot_description" command="$(find xacro)/xacro --inorder $(find gauss_description)/urdf/gauss.urdf.xacro" unless="$(arg urdf_without_meshes)"/>
        <param name="robot_description_tf2" command="$(find xacro)/xacro --inorder $(find gauss_description)/urdf/gauss.urdf.xacro" />
    </group>
    <group if="$(eval hardware_version == 2)">
        <param name="robot_description" command="$(find xacro)/xacro --inorder $(find gauss_description)/urdf/v2/without_mesh_gauss.urdf.xacro" if="$(arg urdf_without_meshes)"/>
        <param name="robot_description" command="$(find xacro)/xacro --inorder $(find gauss_description)/urdf/v2/gauss.urdf.xacro" unless="$(arg urdf_without_meshes)"/>
        <param name="robot_description_tf2" command="$(find xacro)/xacro --inorder $(find gauss_description)/urdf/v2/gauss.urdf.xacro" />
    </group>
</launch>
